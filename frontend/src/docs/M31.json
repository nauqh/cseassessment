{
    "name": "Pandas 101",
    "language": "pandas",
    "content": [
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What will be the output of the following code?\n\n```\nimport pandas as pd\ns = pd.Series([10, 20, 30], index=['a', 'b', 'c'])\nprint(s['b'])\n```\n\nA. 10\n\nB. 20\n\nC. b\n\nD. Error"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "Given a DataFrame `df` with 4 rows and 3 columns, what will `df.shape[1]` return?\n\nA. 4\n\nB. 3\n\nC. [4, 3]\n\nD. Error"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What will be the output of the following code?\n\n```\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Score': [85, 92, 78]\n})\nprint(df[df['Score'] > 80]['Name'])\n```\n\nA. Alice, Bob\n\nB. 85, 92\n\nC. ['Alice', 'Bob']\n\nD. \n\n 0 Alice\n\n 1 Bob"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_MANY",
            "question": "Which of the following methods can be used to handle or fill missing values in a Pandas DataFrame?\n\nA. `df.fillna(value)`\n\nB. `df.dropna()`\n\nC. `df.replace(missing=True)`\n\nD. `df.isnull()`"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "Which of the following will sort the DataFrame `df` by column `'Age'` in descending order?\n\nA. `df.sort_values('Age', ascending=True)`\n\nB. `df.sort('Age', descending=True)`\n\nC. `df.sort_values('Age', ascending=False)`\n\nD. `df.order_by('Age')`"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "Which Pandas function is used to combine two DataFrames **horizontally** based on a common column?\n\nA. `pd.concat()`\n\nB. `pd.append()`\n\nC. `pd.merge()`\n\nD. `pd.combine()`"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What will this code return?\n\n```\ndf = pd.DataFrame({'A': [10, 20, 30]}, index=['x', 'y', 'z'])\nprint(df.loc['y'])\n```\n\nA. 10\n\nB. A    20\n\nC. Error\n\nD. y"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What does the following code do?\n\n```\ndf['Total'] = df['Math'] + df['Science']\n```\n\nA. Adds a new row to the DataFrame\n\nB. Concatenates the 'Math' and 'Science' columns\n\nC. Adds a new column that is the sum of 'Math' and 'Science'\n\nD. Deletes the 'Math' column"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What does `df.reset_index(drop=True)` do?\n\nA. Deletes the current index and replaces it with a default one\n\nB. Sorts the index\n\nC. Sets a new index from a column\n\nD. Drops the first row"
        },
        {
            "choices": [
                "A",
                "B",
                "C",
                "D"
            ],
            "resultType": "MULTICHOICE_SINGLE",
            "question": "What will the following code output?\n\n```\ndf = pd.DataFrame({'A': [1, 2, 2, 3], 'B': [5, 6, 7, 8]})\nprint(df.groupby('A').sum())\n```\n\nA. Grouping A and summing B values per group\n\nB. Summing all columns\n\nC. Raises an error\n\nD. Only sums column A"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Among employees who have TotalPay higher than the average TotalPay, how many unique Job Titles do they hold?\n\n*Expected output: 1307*"
        },
        {
            "resultType": "EXPRESSION",
            "question": "How many Job Titles were represented by only one person in 2013? \n\n*Expected output: 202*"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to return **all information** of employees whose TotalPay are higher than the average TotalPay. \n\n*Your output should look like this*\n\n![](https://i.imgur.com/5u2IcMS.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to find the top 5 job titles with the highest total OvertimePay across all years.\n\n*Your output should look like this*\n\n![](https://i.imgur.com/9wRrXk1.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to determine the top 3 employees with the highest TotalPayBenefits. \n\n*Your output should look like this*\n\n![](https://i.imgur.com/wqkFzMR.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to calculate the average **Benefits** for each JobTitle and filter out titles where the average Benefits is less than $1,000. \n\n*Your output should contains **24 records** in total*\n\n![](https://i.imgur.com/OqGGt4H.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to list the job titles that have more than 1000 employees across all years.\n\n*Your output should contains **22 records** in total*\n\n![](https://i.imgur.com/3tIcC8p.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to determine the percentage contribution of **OvertimePay** to **TotalPay** for each employee, and retrieve those where the contribution is more than 50%.\n\n*Your output should look like this*\n\n![](https://i.imgur.com/CCKZ54h.png)"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Write a single line of code to return top 5 most common jobs.\n\n*Your output should look like this*\n\n```\nTransit Operator    9424\nSpecial Nurse       5791\nRegistered Nurse    4955\nCustodian           3214\nFirefighter         3153\nName: JobTitle, dtype: int64\n```"
        },
        {
            "resultType": "EXPRESSION",
            "question": "Among those 5 most common Job Titles of the whole dataset, how have the avarage Base Pay, Overtime Pay, and Total Pay changed over 4 years of the dataset?\n\nHint: Start by identifying the most common jobs, then filter the dataset before computing the summary. \n\nYou may use functions like `isin()`, `value_counts()`.\n\n*Your output should look like this.*\n\n![](https://i.imgur.com/YUANVVF.png)"
        }
    ]
}