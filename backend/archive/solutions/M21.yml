config:
    resources:
        test_cases:
            source: "solutions/M21_test_cases.json"
            type: "json"

1:
    answer:
        - A
    type: MULTICHOICE
2:
    answer:
        - B
    type: MULTICHOICE
3:
    answer:
        - b
        - d
    type: MULTICHOICE
4:
    answer:
        - B
    type: MULTICHOICE
5:
    answer:
        - E
    type: MULTICHOICE
6:
    answer:
        - a
        - c
    type: MULTICHOICE
7:
    answer:
        - c
        - d
    type: MULTICHOICE
8:
    answer:
        - C
    type: MULTICHOICE
9:
    answer:
        - C
    type: MULTICHOICE
10:
    answer:
        - A
    type: MULTICHOICE
11:
    answer: |
        def count_min_sol(my_list):
            return my_list.count(min(my_list))
    type: FUNCTION
12:
    answer: |
        def calculate_range_sol(my_tup):
            return max(my_tup) - min(my_tup)
    type: FUNCTION
13:
    answer: |
        def extract_email_sol(email, get_username):
            return email.split('@')[0] if get_username else email.split('@')[1]
    type: FUNCTION
14:
    answer: |
        def item_calculator_sol(item, get_weight):
            weight = item['unit_weight'] * item['number_of_units']
            cost   = item['unit_price'] * item['number_of_units']
            return weight if get_weight else cost
    type: FUNCTION
15:
    answer: |
        def heaviest_item_sol(receipt):
            def item_calculator(item, get_weight):
                weight = item['unit_weight'] * item['number_of_units']
                cost   = item['unit_price'] * item['number_of_units']
                return weight if get_weight else cost
            weight_receipt = {item:item_calculator(
                item_info, True) for item, item_info in receipt.items()}
            return max(weight_receipt, key=weight_receipt.get)
    type: FUNCTION
16:
    answer: |
        def priciest_item_sol(receipt):
            def item_calculator(item, get_weight):
                weight = item['unit_weight'] * item['number_of_units']
                cost   = item['unit_price'] * item['number_of_units']
                return weight if get_weight else cost
            price_receipt = {item:item_calculator(
                item_info, False) for item, item_info in receipt.items()}
            return max(price_receipt, key=price_receipt.get)
    type: FUNCTION
