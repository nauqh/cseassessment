-- =============================================================================
-- SOLUTION 1: List all tracks along with their album from The Rolling Stones
-- =============================================================================
SELECT
    t.Name AS "Track Name",
    a.Title AS "Album Title"
FROM
    Track t
    JOIN Album a ON t.AlbumId = a.AlbumId
    JOIN Artist ar ON a.ArtistId = ar.ArtistId
WHERE
    ar.Name = 'The Rolling Stones'
ORDER BY
    a.Title,
    t.Name;

-- =============================================================================
-- SOLUTION 2: Retrieve the total number of tracks in each playlist
-- =============================================================================
SELECT
    p.Name AS "Playlist",
    COUNT(pt.TrackId) AS "Number of Tracks"
FROM
    Playlist p
    JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId
GROUP BY
    p.PlaylistId,
    p.Name
ORDER BY
    COUNT(pt.TrackId) DESC;

-- =============================================================================
-- SOLUTION 3: Find the total revenue generated by each album
-- =============================================================================
SELECT
    a.Title AS "Album",
    SUM(il.UnitPrice * il.Quantity) AS "Total Revenue"
FROM
    Album a
    JOIN Track t ON a.AlbumId = t.AlbumId
    JOIN InvoiceLine il ON t.TrackId = il.TrackId
GROUP BY
    a.AlbumId,
    a.Title
ORDER BY
    SUM(il.UnitPrice * il.Quantity) DESC;

-- =============================================================================
-- SOLUTION 4: Find the number of invoices generated each year
-- =============================================================================
SELECT
    STRFTIME ('%Y', InvoiceDate) AS "Year",
    COUNT(*) AS "Number of Invoices"
FROM
    Invoice
GROUP BY
    STRFTIME ('%Y', InvoiceDate)
ORDER BY
    STRFTIME ('%Y', InvoiceDate);

-- =============================================================================
-- SOLUTION 5: Find customers that spend over $40 at Chinook store
-- =============================================================================
SELECT
    c.FirstName || ' ' || c.LastName AS "CustomerName",
    SUM(i.Total) AS "TotalSpending"
FROM
    Customer c
    JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY
    c.CustomerId,
    c.FirstName,
    c.LastName
HAVING
    SUM(i.Total) > 40
ORDER BY
    SUM(i.Total) DESC;

-- =============================================================================
-- SOLUTION 6: Find the managers and the number of employees they manage
-- =============================================================================
SELECT
    m.FirstName || ' ' || m.LastName AS "ManagerName",
    COUNT(e.EmployeeId) AS "Number of Direct Reports"
FROM
    Employee e
    JOIN Employee m ON e.ReportsTo = m.EmployeeId
GROUP BY
    m.EmployeeId,
    m.FirstName,
    m.LastName
ORDER BY
    m.FirstName || ' ' || m.LastName;

-- =============================================================================
-- SOLUTION 7: Calculate the cumulative sales for each customer
-- =============================================================================
SELECT
    c.CustomerId,
    c.FirstName || ' ' || c.LastName AS "Customer",
    i.InvoiceDate,
    i.Total,
    SUM(i.Total) OVER (
        PARTITION BY
            c.CustomerId
        ORDER BY
            i.InvoiceDate ROWS UNBOUNDED PRECEDING
    ) AS "Cumulative Sales"
FROM
    Customer c
    JOIN Invoice i ON c.CustomerId = i.CustomerId
ORDER BY
    c.CustomerId,
    i.InvoiceDate;

-- =============================================================================
-- SOLUTION 8: Rank the albums by their total sales revenue
-- =============================================================================
SELECT
    a.AlbumId,
    a.Title,
    SUM(il.UnitPrice * il.Quantity) AS "Total Sales",
    RANK() OVER (
        ORDER BY
            SUM(il.UnitPrice * il.Quantity) DESC
    ) AS "Rank"
FROM
    Album a
    JOIN Track t ON a.AlbumId = t.AlbumId
    JOIN InvoiceLine il ON t.TrackId = il.TrackId
GROUP BY
    a.AlbumId,
    a.Title
ORDER BY
    "Rank";

-- =============================================================================
-- SOLUTION 9: Find the total amount that each customer spent each month
-- =============================================================================
SELECT
    c.FirstName || ' ' || c.LastName AS "Customer",
    STRFTIME ('%Y-%m', i.InvoiceDate) AS "Month",
    SUM(i.Total) AS "Total"
FROM
    Customer c
    JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY
    c.CustomerId,
    c.FirstName || ' ' || c.LastName,
    STRFTIME ('%Y-%m', i.InvoiceDate)
ORDER BY
    c.FirstName || ' ' || c.LastName,
    STRFTIME ('%Y-%m', i.InvoiceDate);

-- =============================================================================
-- SOLUTION 10: Find the total amount each customer spent each month (>$45)
-- =============================================================================
SELECT
    c.FirstName || ' ' || c.LastName AS "Customer",
    STRFTIME ('%Y-%m', i.InvoiceDate) AS "Month",
    SUM(i.Total) AS "Total"
FROM
    Customer c
    JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY
    c.CustomerId,
    c.FirstName || ' ' || c.LastName,
    STRFTIME ('%Y-%m', i.InvoiceDate)
HAVING
    SUM(i.Total) > 45
ORDER BY
    c.FirstName || ' ' || c.LastName,
    STRFTIME ('%Y-%m', i.InvoiceDate);